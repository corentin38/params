;;-----------------------------------------------------------------------
;; file		.emacs
;; author	Corentin Marciau
;; updated	jeudi 9 mai 2013, 17:04:27 (UTC+0200)
;;
;; description :	.emacs modifié par pillage systématique du web
;;			par COrentin Marciau [edit 19/02/2014] EH BEN C'EST DE LA MERDE !!!!
;; 
;; .emacs mainly realized from Kituu repo at :
;;    https://github.com/xaccrocheur/kituu/
;; 
;;---------------------------------------------------------------------
(setq user-full-name "Corentin Marciau")
(setq user-mail-address "<corentin@marciau.fr>")
(setq mail-self-address "Corentin Marciau <corentin@marciau.fr>")

;; Load path
(add-to-list 'load-path "~/.emacs.d/elisp")


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(inhibit-startup-screen t)
 '(scroll-bar-mode t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; No menu bar, no tool bar. What do they stand for anyways ?
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))

;; Melpa seems to be a decent package repository for emacs
(package-initialize)
(add-to-list 'package-archives
	     '("melpa" . "http://melpa.milkbox.net/packages/") t)

(mapc
 (lambda (package)
   (unless (package-installed-p package)
     (progn (message "installing %s" package)
            (package-refresh-contents)
            (package-install package))))
 '(auto-complete undo-tree markdown-mode))

;; '(ttl-mode less-css-mode tabbar org auto-complete undo-tree magit clojure-mode markdown-mode yasnippet paredit paredit-menu php-mode haml-mode rainbow-mode)
;; Seems interesting :
;; org			note & todo list
;; magit		git features
;; markdown-mode	ah bah markdown, en fait
;; rainbow-mode		rainbows ????

(eval-and-compile
;;  (require 'cl nil 'noerror)          ; Built-in : Common Lisp lib
;;  (require 'edmacro nil 'noerror)     ; Built-in : Macro bits (Required by iswitchb)
  (require 'package nil 'noerror)
;;  (require 'mail-bug nil 'noerror)
;;  (require 'pixilang-mode nil 'noerror)
;;  (require 'bpm nil 'noerror)
;;  (require 'zeroconf nil 'noerror)
  (require 'auto-complete nil 'noerror)
  )


;; All about C++ mode and style ?
; style I want to use in c++ mode
(c-add-style "my-style"
             '("stroustrup"
               (indent-tabs-mode . nil)                           ; use spaces rather than tabs
               (c-basic-offset . 4)                               ; indent by four spaces
               (c-offsets-alist . ((innamespace . [0])))
               (c-offsets-alist . ((inline-open . 0)              ; custom indentation rules
                                   (brace-list-open . 0)
                                   (statement-case-open . +)))))

(defun my-c++-mode-hook ()
  (c-set-style "my-style")        ; use my-style defined above
  (auto-fill-mode)
  (c-toggle-auto-hungry-state 1))

(add-hook 'c++-mode-hook 'my-c++-mode-hook)

(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq indent-line-function 'insert-tab)


(defvar iswitchb-mode-map)
(defvar iswitchb-buffer-ignore)
(defvar show-paren-delay)
(defvar recentf-max-saved-items)
(defvar recentf-max-menu-items)
(defvar desktop-path)
(defvar desktop-dirname)
(defvar desktop-base-file-name)
(defvar display-time-string)
(defvar ediff-window-setup-function)
(defvar ediff-split-window-function)
(defvar tabbar-buffer-groups-function)
(defvar px-bkp-new-name)


;; ### Inserts :
(require 'auto-insert-tkld)

(setq auto-insert-path
      (cons "/home/corentin/.emacs.d/insert" auto-insert-path))
(setq auto-insert-automatically t)
(setq auto-insert-alist
      '(("\\.c$" . "C")			; C
	("\\.cpp$"."CPP")		; C++
	("\\.cc$"."CPP")		; |
	("\\.h$" . "Cinclude")		; C include
	("\\.hh$" . "CPPinclude")	; C++ include
	("\\.hpp$" . "CPPinclude")	; |

	("[Rr]eadme$" . "Readme")	; Readme
	("README$" . "Readme")		; |
	("[Rr]eadme.txt" . "Readme")	; |
	("README.txt" . "Readme")	; |
	("READ.ME" . "Readme")		; |

	("\\.sh$" . "Shell")		; Shell
	("[Mm]akefile$" . "Makefile")	; Makefile

	("\\.php$" . "php")		; php
	("\\.sql$" . "SQL")		; SQL
	("\\.lsp$" . "Lisp")		; Lisp
	))
(setq auto-insert-type-alist
      '(("C" . "insert.c")
	("CPP" . "insert.cpp")
	("Cinclude" . "insert.h")
	("CPPinclude" . "insert.hh")
	("Lisp" . "insert.lsp")
	("Makefile" . "insert.makefile")
	("php" . "insert.php")
	("Readme" . "insert.readme")
	("Shell" . "insert.sh")
	("SQL" . "insert.sql")
	))

;; BORDEL
;; Heure
(display-time)
(setq display-time-day-and-date t)
(setq display-time-24hr-format t)

;; le numero de la ligne et de la colone
(setq line-number-mode t)
(setq column-number-mode t)
(require 'linum)
(global-linum-mode t)



;; CUSTOM FUNCTIONS
(defun px-kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))

(defun move-line-up ()
  "Move up the current line."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))

(defun move-line-down ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))

(defun toggle-fullscreen ()
  "Real, mozilla-like full screen."
  (interactive)
  (set-frame-parameter nil 'fullscreen (if (frame-parameter nil 'fullscreen) nil 'fullboth)))

(defun px-match-paren (arg)
  "Go to the matching paren if on a paren; otherwise insert <key>."
  (interactive "p")
  (cond
   ((char-equal 41 (char-before)) (backward-list 1))
   ((char-equal 125 (char-before)) (backward-list 1))
   ((and
     (char-equal 123 (char-before))
     (char-equal 10 (char-after)))
    (backward-char 1) (forward-list 1))
   ((looking-at "\\s\(") (forward-list 1))
   ((looking-at "\\s\)") (backward-list 1))
   (t (self-insert-command (or arg 1)))))

(defun px-scratch ()
  "Switch to scratch buffer"
  (interactive)
  (switch-to-buffer "*scratch*"))

(defun px-kill-buffer ()
  "Prompt when a buffer is about to be killed.
Do the right thing and delete window."
  (interactive)
  (if (and (buffer-modified-p)
           buffer-file-name
           (file-exists-p buffer-file-name)
           (setq backup-file (car (find-backup-file-name buffer-file-name))))
      (let ((answer (completing-read (format "Buffer modified %s, (d)iff, (s)ave, (k)ill? " (buffer-name))
                                     '("d" "s" "k") nil t)))
        (cond
         ((equal answer "d")
          (set-buffer-modified-p nil)
          (let ((orig-buffer (current-buffer))
                (file-to-diff (if (file-newer-than-file-p buffer-file-name backup-file)
                                  buffer-file-name
                                backup-file)))
            (set-buffer (get-buffer-create (format "%s last-revision" (file-name-nondirectory file-to-diff))))
            (buffer-disable-undo)
            (insert-file-contents file-to-diff nil nil nil t)
            (set-buffer-modified-p nil)
            (setq buffer-read-only t)
            (ediff-buffers (current-buffer) orig-buffer)))
         ((equal answer "k")
          (progn
            (kill-buffer (current-buffer))
            (delete-window)))
         (t
          (progn
            (save-buffer)
            (kill-buffer (current-buffer))
            (delete-window)
            ))))
    (progn
      ;; (message "Buffer is %s" (current-buffer))
      (kill-buffer)
      ;; (switch-to-buffer (current-buffer))
      ;; (message "Buffer is %s" (current-buffer))
      (if (> (length (window-list)) 1)
          (delete-window))
      (kbd "C-x b <return>")
      ;; (switch-to-buffer (other-buffer))
      )))

(defun px-websearch-that-bitch (start end)
  "Websearch selected string
Bound to c-c g."
  (interactive "r")
  (let ((q (buffer-substring-no-properties start end)))
    (browse-url (concat "https://duckduckgo.com/?q="
                        (url-hexify-string q) "!g"))))

(defun px-select-text-in-quote ()
  "Select text between the nearest left and right delimiters.
Bound to S-SPC."
  (interactive)
  (let (b1 b2)
    (skip-chars-backward "^<>([{“「『‹«（〈《〔【〖⦃\"")
    (setq b1 (point))
    (skip-chars-forward "^<>)]}”」』›»）〉》〕】〗⦄\"")
    (setq b2 (point))
    (set-mark b1)))

(global-set-key (kbd "S-SPC") 'px-select-text-in-quote)

(defun px-insert-or-enclose-with-signs (leftSign rightSign)
  "Insert a matching bracket and place the cursor between them."
  (interactive)
  (if mark-active
      (let ((st (point))
            (ed (mark)))
        (goto-char ed)
        (save-excursion
          (if (> st ed)
              (progn (message "sup st: %s ed: %s" st ed)
                     (insert leftSign)
                     (goto-char st)
                     (forward-char 1)
                     (insert rightSign))
            (progn (message "end st: %s ed: %s" st ed)
                   (insert rightSign)
                   (goto-char st)
                   (insert leftSign)
                   (goto-char (+ 1 ed)))))
        (if (> st ed)
            (goto-char (+ 2 st))
          (goto-char (+ 2 ed))))
    (progn
      (insert leftSign rightSign)
      (backward-char 1))))

(defun px-insert-end-of-command-sign ()
  "Insert a ; at the end of the current line."
  (interactive)
  (let ((st (point)))
    (save-excursion
      (move-end-of-line nil)
      (insert ";")
      (goto-char st))))

(defun insert-pair-paren () (interactive) (px-insert-or-enclose-with-signs "(" ")"))
(defun insert-pair-brace () (interactive) (px-insert-or-enclose-with-signs "{" "}")
  (newline-and-indent)
  (newline-and-indent)
  (previous-line)
  (c-indent-line-or-region)
)
(defun insert-pair-bracket () (interactive) (px-insert-or-enclose-with-signs "[" "]"))
(defun insert-pair-single-angle () (interactive) (px-insert-or-enclose-with-signs "<" ">"))
(defun insert-pair-squote () (interactive) (px-insert-or-enclose-with-signs "'" "'"))
(defun insert-pair-dbquote () (interactive) (px-insert-or-enclose-with-signs "\"" "\""))

(defun px-toggle-comments ()
  "If region is set, [un]comments it. Otherwise [un]comments current line."
  (interactive)
  (if (eq mark-active nil)
      (progn
        (beginning-of-line 1)
        (set-mark (point))
        (forward-line)
        (comment-dwim nil))
    (comment-dwim nil))
  (deactivate-mark))

(defun iswitchb-local-keys ()
  "easily switch buffers (F5 or C-x b)"
  (mapc (lambda (K)
          (let* ((key (car K)) (fun (cdr K)))
            (define-key iswitchb-mode-map (edmacro-parse-keys key) fun)))
        '(("<right>" . iswitchb-next-match)
          ("<left>"  . iswitchb-prev-match)
          ("<up>"    . ignore             )
          ("<down>"  . ignore             ))))

(defun px-laptop-mode ()
  "smaller default size"
  (interactive)
  (set-face-attribute 'default nil :height 90))

(defun px-desktop-mode ()
  "default font size"
  (interactive)
  (set-face-attribute 'default nil :height 105))

;; MODES !!!!!

(fset 'yes-or-no-p 'y-or-n-p)
(put 'overwrite-mode 'disabled t)
(setq c-default-style "bsd"
      c-basic-offset 2)
(add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))


;; Cool hooks
(defun my-find-file-check-make-large-file-read-only-hook ()
  "If a file is over a given size, make the buffer read only."
  (when (> (buffer-size) (* 1024 1024))
    (setq buffer-read-only t)
    (buffer-disable-undo)
    (fundamental-mode)))

(add-hook 'find-file-hooks 'my-find-file-check-make-large-file-read-only-hook)

(defun my-c-mode-hook ()
  "Proper mono-line comments"
  (setq-local comment-start "//")
  (setq-local comment-padding " ")
  (setq-local comment-end "")
  (setq-local comment-style 'indent))

(add-hook 'c-mode-hook 'my-c-mode-hook)
(add-hook 'text-mode-hook 'turn-off-auto-fill)

;; Externals! _________________________________________________________________

(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "firefox")


;; vars ?
;;(setq-default cursor-type 'bar)
;; ispell-dictionary "francais"

(setq

 text-mode-hook 'turn-on-auto-fill
 fill-column 75

)

;; Window title (with edited status + remote indication)
(setq frame-title-format
      '(""
        invocation-name
        " "
        emacs-version
        " %@ "
        (:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))
        " [%*]"))


;; Aaaaal the shortcuuts !

;; Is gonna be great
(global-set-key (kbd "<C-return>") (kbd "C-e C-j")) ; Keyboard macro! (open new line)

(define-key global-map [(super up)] '(lambda() (interactive) (scroll-other-window -1)))
(define-key global-map [(super down)] '(lambda() (interactive) (scroll-other-window 1)))

(global-set-key (kbd "C-;") 'px-insert-end-of-command-sign)

(global-set-key [(meta shift up)]  'move-line-up)
(global-set-key [(meta shift down)]  'move-line-down)

(global-set-key (kbd "M-j")
                (lambda ()
                  (interactive)
                  (join-line -1)))

(setq-default indent-tabs-mode nil)

(global-set-key (kbd "²") 'hippie-expand)

(define-key global-map [f1] 'delete-other-windows)
(define-key global-map [S-f1] 'px-help-emacs)
(define-key global-map [f2] 'other-window)
(define-key global-map [M-f2] 'swap-buffers-in-windows)
(define-key global-map [f3] 'split-window-vertically)
(define-key global-map [f4] 'split-window-horizontally)
(define-key global-map [f5] 'iswitchb-buffer) ;new way
(define-key global-map [f7] 'flyspell-buffer)
(define-key global-map [M-f7] 'flyspell-mode)
(define-key global-map [M-f10] 'toggle-truncate-lines)
(define-key global-map [f12] 'px-fullscreen)

(global-set-key (kbd "C-f") 'isearch-forward)
(global-set-key (kbd "C-S-f") 'isearch-backward)

(define-key isearch-mode-map (kbd "C-f") 'isearch-repeat-forward)
(define-key isearch-mode-map (kbd "C-S-f") 'isearch-repeat-backward)

(global-set-key (kbd "ù") 'px-match-paren)
(global-set-key (kbd "C-ù") 'forward-sexp)
(global-set-key (kbd "C-%") 'backward-sexp)

(global-set-key (kbd "C-c C-g") 'px-websearch-that-bitch)

(global-set-key (kbd "s-k") 'px-kill-buffer)
(global-set-key (kbd "s-h") 'html-mode)

(global-set-key (kbd "<C-kp-0>") 'kmacro-end-and-call-macro)

(global-set-key (kbd "C-z") 'undo-tree-undo)
(global-set-key (kbd "C-S-z") 'undo-tree-redo)

